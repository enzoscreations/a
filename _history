{"entries":[{"timestamp":1736345041060,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"# Import micro: bit modules\nfrom microbit import *\nfrom random import randrange\nimport music\n    from collections import OrderedDict\n\nmoveTimer = 0\nplayerMoveSpeed = 2 #higher is slower\n\nfallTimer = 0\nfallingSpeed = 5 #higher is slower\n\ninPosition = False\n\nplacedTiles = []\ncheckTiles = []\n\nrowDown = False\n\ntune = [\"F4:4\", \"D4:4\", \"B3:4\"]\ntune2 = [\"F4:1\", \"A4:2\"]\n\n# Tile object\nclass Tile:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\n\n  # Function to move in a direction\ndef move(self, direction):\n\nif (direction == \"right\"):\n        \n        # Prevent the tile moving off the screen on the right side\nif (self.x < 4):\n    self.x += 1\n\nif (direction == \"left\"):\n        \n        # Prevent the tile moving off the screen at the other side(left)\nif (self.x > 0):\n    self.x -= 1\n\nfloatingTile = Tile(randrange(5), 0)\n\ngameOver = False\n\n# Gameloop\nwhile True:\n    if (gameOver == False):\n        moveTimer += 1\nfallTimer += 1\n\n        # Rotate tile\nif button_a.is_pressed() and button_b.is_pressed():\nprint(\"Rotate tile.\")\n\n        # Player input(move left and right)\nelif button_a.is_pressed() and moveTimer > playerMoveSpeed:\nfloatingTile.move(\"left\")\nmoveTimer = 0\n\nelif button_b.is_pressed() and moveTimer > playerMoveSpeed:\nfloatingTile.move(\"right\")\nmoveTimer = 0\n        \n        # Move tile down slowly\nif fallTimer > fallingSpeed and floatingTile.y != 4:\n            \n            # Move the tile one position down\nfloatingTile.y += 1\n\nfallTimer = 0\n\ninPosition = False #reset variable\n\n        # Check tiles for collusions\n        for tile in placedTiles:\n\n            # Check if above other tile\nif (tile[0] == floatingTile.x and tile[1] == floatingTile.y + 1):\ninPosition = True           \n\n        # When above another tile, or at ground level, stop and spawn an new tile\nif (inPosition == True or floatingTile.y == 4):\n\n            # Add current tile to array with placed tiles\nplacedTiles.append([floatingTile.x, floatingTile.y])\n\n            # Spawn an new tile\nfloatingTile.y = 0\nfloatingTile.x = randrange(5)\n\nmusic.pitch(500, 10)\n\ncheckedTiles = []\nrowDown = False\n\n        # Check for full row\n        for tile in placedTiles:\n        if tile[1] == 4:\n            checkedTiles.append(tile[1])\n\n        # If there is a full row, remove it and move the rest down one position\nif len(checkedTiles) == 5:\n\n            # Nice sound effect\nmusic.play(tune2)\n\n            # Remove old row\nfor tile in placedTiles[:]:\nif tile[1] == 4:\n    placedTiles.remove(tile)\n            \n            # Move other rows down one pixel\nfor index, tile in enumerate(placedTiles):\n    placedTiles[index][1] += 1\n\n        # Clear screen to draw frame\ndisplay.clear()\n\n        # Display the placed tiles\nfor tile in placedTiles:\n    display.set_pixel(tile[0], tile[1], 7)\n\nif (tile[1] == 0):\n    gameOver = True\n\n        # Display the floating tile\ndisplay.set_pixel(floatingTile.x, floatingTile.y, 9)\n\n        # Remove duplicates from array of placed tiles\n        # placedTiles = OrderedDict((tuple(x), x) for x in placedTiles).values()\n\n        # A bit of input delay to prevent movement at warp speed\nsleep(100)\n\n    else:\n\ndisplay.show(Image.SILLY)\n\nsleep(500)\n\nmusic.play(tune)\n\nsleep(1200)\n\nmoveTimer = 0\nfallTimer = 0\ninPosition = False\nplacedTiles = []\n\ngameOver = False"],[1,"\n"]],"start1":0,"start2":0,"length1":3275,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":225,"start2":225,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1736345041059,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"a\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1736345280890}